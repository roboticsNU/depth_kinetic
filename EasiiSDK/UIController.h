/***************************************************************************************/
//  SoftKinetic iisu SDK
//  Project Name      : iisu SDK
//  Revision          : 3.0.2
//  Date              : 2012/01/31
//  Module Name       : Easii
//  Description       : Encapsulates a UI controller.
//
// COPYRIGHT AND CONFIDENTIALITY NOTICE - SOFTKINETIC CONFIDENTIAL
// INFORMATION All rights reserved to SOFTKINETIC SOFTWARE SA (a
// company incorporated and existing under the laws of Belgium, with
// its principal place of business at Boulevard de la Plainelaan 15,
// 1050 Brussels (Belgium), registered with the Crossroads bank for
// enterprises under company number 0890 705 864 - "Softkinetic
// Software")
//
// The source code of the SoftKinetic iisu SDK is proprietary and
// confidential information of Softkinetic Software SA
// For any question about terms and conditions, please contact: info@softkinetic.com
// Copyright (c) 2002-2013 Softkinetic Software SA
/****************************************************************************************/

#pragma once

#include <Iisu/Devices/Device.h>
#include "Controller.h"
#include "UIPointer.h"

namespace SK {
namespace Easii {
/**
 * \ingroup UI
 * \class UIController UIController.h EasiiSDK/Iisu.h
 * \brief A class representing the data associated to a user
 *        interaction generated controller.
 *
 * Controllers collect data about ‘virtual pointers’ that allow the
 * User to interact with the system, in a manner similar to a
 * mouse. There are two types of controllers generated by easii™: the
 * controllers that come directly from the computation of the UI
 * module of iisu™ (called ‘UI Controllers’), and controllers derived
 * from the User’s skeleton hand tracking (called ‘User
 * Controllers’). Both controllers share the same functionality but
 * are calculated from a different data set.
 *
 * You can access the controller from the Scene:
 *
 * \code
 * using namespace SK::Easii;
 *
 * Iisu &iisu = Iisu::instance();
 * int controllerCount = iisu.getScene().getControllerCount();
 * for (int i = 0; i < controllerCount; ++i)
 * {
 *     Controller &controller = iisu.getScene().getController(i);
 *     if (controller.isActive())
 *     {
 *         ...
 *     }
 * }
 * \endcode
 */
class UIController : public Controller
{
	UIController(const UIController &);
	UIController &operator = (const UIController &);

	friend class Scene;

public:

	// \cond IGNORE_DOXYGEN
	/**
	 * \brief Default constructor.
	 */
	UIController();

	/**
	 * \brief Destructor.
	 */
	virtual ~UIController();
	// \endcond

	// \cond IGNORE_DOXYGEN
	SK::Result init(int index, SK::Device &device);
	// \endcond

	virtual bool isActive() const;

	virtual UIPointer &getPointer();

	virtual const SK::Array<Gesture> &getGestures() const;

	virtual BoundingBox getBoundingBox() const;

	virtual SK::Vector3 getPosition() const;

private:

	virtual void addGesture(const Gesture &gesture);

	struct Impl;
	Impl *m_pimpl;

};
} // namespace Easii
} // namespace SK
