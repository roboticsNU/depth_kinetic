/***************************************************************************************/
//  SoftKinetic iisu SDK
//  Project Name      : iisu SDK
//  Revision          : 3.0.2
//  Date              : 2012/01/31
//  Module Name       : Easii
//  Description       : Encapsulates user or UI controller data.
//
// COPYRIGHT AND CONFIDENTIALITY NOTICE - SOFTKINETIC CONFIDENTIAL
// INFORMATION All rights reserved to SOFTKINETIC SOFTWARE SA (a
// company incorporated and existing under the laws of Belgium, with
// its principal place of business at Boulevard de la Plainelaan 15,
// 1050 Brussels (Belgium), registered with the Crossroads bank for
// enterprises under company number 0890 705 864 - "Softkinetic
// Software")
//
// The source code of the SoftKinetic iisu SDK is proprietary and
// confidential information of Softkinetic Software SA
// For any question about terms and conditions, please contact: info@softkinetic.com
// Copyright (c) 2002-2013 Softkinetic Software SA
/****************************************************************************************/

#pragma once

#include "Pointer.h"
#include "BoundingBox.h"
#include "Gesture.h"
#include <Foundation/DataTypes/Geometry/Vector3.h>
#include <Foundation/DataTypes/Array/Array.h>

namespace SK {
namespace Easii {
/**
 * \class Controller Controller.h EasiiSDK/Iisu.h
 * \brief This class models a 3D controller that allows a User to
 *        interact with a system.
 *
 * Controllers collect data about ‘virtual pointers’ that allow the
 * User to interact with the system, in a manner similar to a
 * mouse. There are two types of controllers generated by easii™: the
 * controllers that come directly from the computation of the UI
 * module of iisu™ (called ‘UI Controllers’), and controllers derived
 * from the User’s skeleton hand tracking (called ‘User
 * Controllers’). Both controllers share the same functionality but
 * are calculated from a different data set.
 *
 * \sa UIController
 * \sa UserController
 * \sa HandController
 */
class Controller
{
public:

	virtual ~Controller() = 0;

	/**
	 * \brief Checks if the controller is active.
	 * \return \c true if the controller is active.
	 */
	virtual bool isActive() const = 0;

	/**
	 * \brief Gets the pointer.
	 * \return A reference to a Pointer object.
	 */
	virtual Pointer &getPointer() = 0;

	// \cond IGNORE_DOXYGEN
	/**
	 * \brief Gets a list of gestures that were accumulated during the
	 *       last update.
	 * \return A list of gestures.
	 */
	const SK::Array<Gesture> &getGestureList() const;
	// \endcond

	/**
	 * \brief Gets a list of gestures that were accumulated during the
	 *       last update.
	 * \return An array of gestures.
	 */
	virtual const SK::Array<Gesture> &getGestures() const = 0;

	/**
	 * \brief Gets a bounding box indicating the active 3D area.
	 * \return A bounding box.
	*/
	virtual BoundingBox getBoundingBox() const = 0;

	/**
	 * \brief Gets the controller's position.
	 * \return The position of the controller in world coordinates.
	 */
	virtual SK::Vector3 getPosition() const = 0;

private:

	virtual void addGesture(const Gesture &gesture) = 0;

};
} // namespace Easii
} // namespace SK
