/***************************************************************************************/
//  SoftKinetic iisu SDK
//  Project Name      : iisu SDK
//  Revision          : 3.0.2
//  Date              : 2012/01/31
//  Module Name       : Easii
//  Description       : Encapsulates a UI pointer.
//
// COPYRIGHT AND CONFIDENTIALITY NOTICE - SOFTKINETIC CONFIDENTIAL
// INFORMATION All rights reserved to SOFTKINETIC SOFTWARE SA (a
// company incorporated and existing under the laws of Belgium, with
// its principal place of business at Boulevard de la Plainelaan 15,
// 1050 Brussels (Belgium), registered with the Crossroads bank for
// enterprises under company number 0890 705 864 - "Softkinetic
// Software")
//
// The source code of the SoftKinetic iisu SDK is proprietary and
// confidential information of Softkinetic Software SA
// For any question about terms and conditions, please contact: info@softkinetic.com
// Copyright (c) 2002-2013 Softkinetic Software SA
/****************************************************************************************/

#pragma once

#include "Pointer.h"
#include "Gesture.h"
#include <Iisu/Devices/DataExtractor.h>

namespace SK {
namespace Easii {
/**
 * \ingroup UI
 * \class UIPointer UIPointer.h EasiiSDK/Iisu.h
 * \brief Class representing a pointer generated by iisu's UI
 */
class UIPointer : public Pointer
{
	UIPointer(const UIPointer &);
	//UIPointer &operator = (const UIPointer &);

public:

	// \cond IGNORE_DOXYGEN
	UIPointer();

	virtual ~UIPointer();
	// \endcond

	// \cond IGNORE_DOXYGEN
	SK::Result init(int index, SK::Device &device);
	// \endcond

	//! gets the pointer's position
	/*!
	  \return the 3D position of the pointer
	*/
	virtual SK::Vector3 getPosition() const;

	//! gets the pointer's status.
	/*!
	  \return the status of the pointer.
	*/
	virtual int getStatus() const;

private:

	struct Impl;
	Impl *m_pimpl;

};
} // namespace Easii
} // namespace SK
